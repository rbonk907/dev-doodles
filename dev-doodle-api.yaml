openapi: 3.0.3
info:
  title: Dev Doodle API
  description: |-
    The Dev Doodle API based on the OpenAPI 3.0 specification
  version: 1.0.0
tags:
  - name: stickers
    description: Everything related to stickers
  - name: authentication
    description: Operations regarding user login
  - name: user
    description: Operations about user
  - name: shop
    description: Access to Dev Doodles orders
paths:
  /stickers:
    get:
      tags:
        - stickers
      summary: Get all stickers
      description: Retrieves all stickers stored in the Database
      operationId: getStickers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sticker'
    post:
      tags:
        - stickers
      summary: Add a sticker to the store
      description: ''
      operationId: postSticker
      requestBody:
        description: Sticker object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sticker'
      responses:
        default:
          description: successful operation
  /stickers/{id}:
    get:
      tags:
        - stickers
      summary: Find sticker by ID
      description: Returns a single sticker matching the provided ID from the database
      operationId: getStickerById
      parameters:
        - name: id
          in: path
          description: ID of sticker to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sticker'
        '400':
          description: Invalid ID supplied
        '404':
          description: Sticker not found
  /signup:
    post:
      tags:
        - authentication
      summary: Create user
      description: Adds new user to the database
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /login/password:
    post:
      tags:
        - authentication
      summary: Logs in a user using a username and password
      description: Logs a user into the store with a provided username and password
      operationId: loginUser
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: number
      responses:
        '302':
          description: Redirect
  /logout:
    post:
      tags:
        - authentication
      summary: Logs out current user session
      description: ''
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /login/federated/google:
    get:
      tags:
        - authentication
      summary: Redirects user to google for sign in 
      description: "Redirects user to Google's identity server in order to sign user in with OAuth 2.0" 
      operationId: redirectUserGoogle
      responses:
       '302':
         description: Redirect
  /oauth2/redirect/google:
    get:
      tags:
        - authentication
      summary: Logs user into site with Google credentials
      description: This route can only be reached after getting redirected from google. If google login was successful, the provided credentials are used to log the user into the store and redirect user to home page.
      operationId: loginUserGoogle
      responses:
        '302':
          description: Redirect
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: Returns a single user from the database matching the provided username
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user information
      description: This can only be done by the logged in user
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing user in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: Removes user from the database
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /shop/cart:
    post:
      tags:
        - shop
      summary: Create an empty shopping cart
      description: ''
      operationId: createShoppingCart
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  qty:
                    type: integer
                    format: int32
                    example: 0
                  item:
                    type: object
      responses:
        '200':
          description: successful operation
  /shop/cart/{cartId}:
    get:
      tags:
        - shop
      summary: Returns items in shopping cart
      description: ''
      operationId: getShoppingCart
      parameters: 
        - name: cartId
          in: path
          description: ID of cart that needs to be stored in orders
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
    post:
      tags:
        - shop
      summary: Place an order
      description: ''
      operationId: placeOrder
      parameters: 
        - name: cartId
          in: path
          description: ID of cart that needs to be stored in orders
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    put:
      tags:
        - shop
      summary: Edit/add items to shopping cart
      description: ''
      operationId: editShoppingCart
      parameters: 
        - name: cartId
          in: path
          description: ID of cart that needs to be edited
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  qty:
                    type: integer
                    format: int32
                    example: 5
                  item:
                    $ref: '#/components/schemas/Sticker'
      responses:
        '200':
          description: successful operation
  /shop/order/{orderId}:
    get:
      tags:
        - shop
      summary: Returns a single order
      description: Retrieves an order from the database matching the provided order ID
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - shop
      summary: Delete an order by ID
      description: ''
      operationId: deleteOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: successful operation
components:
  schemas:
    Cart:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        items:
          type: array
          items:
            type: object
            properties:
              qty:
                type: integer
                format: int32
                example: 5
              item:
                $ref: '#/components/schemas/Sticker'
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        items:
          type: array
          items:
            type: object
            properties:
              qty:
                type: integer
                format: int32
                example: 5
              item:
                $ref: '#/components/schemas/Sticker'
        shipDate:
          type: string
          format: date-time
        customer:
          $ref: '#/components/schemas/Customer'
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Web Dev
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Sticker:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: Title
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: sticker status in the store
          enum:
            - in stock
            - sold out
      xml:
        name: sticker